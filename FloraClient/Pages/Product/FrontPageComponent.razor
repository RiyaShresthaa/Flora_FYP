<div class="container">
    <div class="row">
        <div class="col-md-12">
            @if (FeaturedProductList != null && FeaturedProductList.Any())
            {
                <div class="carousel">
                    @foreach (var product in FeaturedProductList.OrderByDescending(p => p.DateUploaded).Take(5))
                    {
                        <div class="carousel-item">
                            <img src="@product.Base64Img" alt="@product.Name" width="250" height="380" />
                            <div class="carousel-caption">
                                <h3>@product.Name <sup><span class="badge bg-primary">@GetNewLabel(product.DateUploaded)</span></sup></h3>
                                <p>@product.Description</p>
                                <div class="buttons">
                                    <button class="btn btn-secondary" @onclick="(() => ShowDetails(product))">Details</button>
                                    <button class="btn btn-outline-danger" @onclick="(() => AddToCart(product))">BUY NOW</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="alert alert-info">No Product Available</div>
            }
        </div>
    </div>
</div>

@code {
    // Instance of list of products
    List<Product>? FeaturedProductList;

    protected override async Task OnInitializedAsync()
    {
        await RetrieveFeaturedProduct();
        ProductServices.ProductAction += StateHasChanged;
    }

    // Retrieve items from API
    private async Task RetrieveFeaturedProduct()
    {
        FeaturedProductList?.Clear();
        await ProductServices.GetAllProducts(true); // Fetch only featured products
        FeaturedProductList = ProductServices.FeaturedProducts;
    }

    string GetNewLabel(DateTime dateUploaded)
    {
        int maxDays = 30;
        int productDataAfterUploaded = (DateTime.Now - dateUploaded).Days;
        return productDataAfterUploaded <= maxDays ? "New" : "";
    }

    // Method to show product details
    void ShowDetails(Product product)
    {
        // Implement logic to show details of the selected product
    }

    // Method to add product to cart
    void AddToCart(Product product)
    {
        // Implement logic to add the product to the cart
    }

    public void Dispose()
    {
        ProductServices.ProductAction -= StateHasChanged;
    }
}
